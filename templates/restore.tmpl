#!/bin/bash

usage()
{
echo "obs_restore.sh obsnum
  Restores the given observation(s) from its backup location (Acacia) to disk.
  It both downloads and extracts the backed-up tar file.
  This script does not run anything on the SLURM queue.

  obsnum : the obsid to be restored." 1>&2;
}

# Consume the first argument
obsnum=$1
shift

if [[ $obsnum == "-h" ]]
then
  usage
  exit 0
fi

if [[ -z $obsnum ]]
then
  usage
  exit 1
fi

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

# Load the rclone module
RCLONE_MODULE=$(module -t --default -r avail "^rclone$" 2>&1 | grep -v ':' | head -1)
module load $RCLONE_MODULE

# Load environment settings afresh
hpc_user_settings=$($GPMBASE/gpm_track.py get_environment)

acacia_path_info=$($GPMBASE/gpm_track.py acacia_path --obs_file $obsnum)
test_fail $?

read -r obsid epoch tar_contains_folder acacia_path <<< "$acacia_path_info"

if [[ "$tar_contains_folder" == "0" ]]
then
  SCRATCH_PATH=$GPMSCRATCH/$epoch/$obsid
else
  SCRATCH_PATH=$GPMSCRATCH/$epoch
fi
echo "-----------------------------"
echo "Downloading $obsid to $GPMSCRATCH/$epoch/$obsid"
mkdir -p $SCRATCH_PATH
cd $SCRATCH_PATH
rclone cat $acacia_path | tar xvzf -
test_fail $?

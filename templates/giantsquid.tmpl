#! /bin/bash -l

set -x

obsnum="$1"
datadir="$2"

# Ensure that the target download directory exists and cd into it
mkdir -p "${datadir}" && cd "${datadir}"

# Make sure that the measurement set hasn't already been downloaded (in full or in part)
if [[ -d "${obsnum}.ms" || -f ${obsnum}_*_ms.tar ]]
then
  # See whether what's meant to be there is indeed there
  grep -v birli_manifest.sha1sum birli_manifest.sha1sum | sha1sum -c

  # If it isn't, then we infer that it is partially downloaded.
  # We still don't know whether it is being *currently* downloaded (by another job),
  # in which case we *should* return a "preprocessing" error code (=99),
  # or if the download was interrupted, in which case we should return
  # a "fail" error code (e.g. 1). We return a "fail" code, because this
  # won't affect the success of the other process, if it exists.
  if [[ $? -ne 0 ]]; then
    echo "${obsnum}.ms or ${obsnum}_*_ms.tar already exists, but checksum failed incomplete. Perhaps another process is downloading it currently?"
    exit 1
  fi

  echo "${obsnum}.ms or ${obsnum}_*_ms.tar already exists; please remove before trying to (re)download."
  exit 0
fi

# Check the state of the obs preprocessing on ASVO
state="$(giant-squid list "${obsnum}" --json | jq -r ".[]| select( .obsid == ${obsnum} ).jobState")"
state="${state,,}" # convert to lower case

if [[ -z $state ]]; then
    giant-squid submit-conv -p avg_time_res=4,avg_freq_res=40,flag_edge_width=80,output=ms "${obsnum}"
    exit 99
elif [[ "$state" == "ready" ]]; then
    giant-squid download --keep-zip ${obsnum}
    tar -xf ${obsnum}_*_ms.tar
    grep -v birli_manifest.sha1sum birli_manifest.sha1sum | sha1sum -c

    # Check if the download was successful
    if [[ $? -ne 0 ]]; then
        exit 1
    fi

    # The tar file has been successfully extracted, so remove it
    rm ${obsnum}_*_ms.tar
else
    echo "State on ASVO: ${state}. Neither downloading this obs (${obsnum}) nor requesting preprocessing"
    exit 99
fi

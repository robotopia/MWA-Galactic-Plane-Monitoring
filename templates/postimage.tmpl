#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f ${obsnum} ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"
    
    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "postimage obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
    if [[ $1 != 0 ]]
    then
        track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
        exit "$1"
    fi
}

track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

epoch="$(${GPMBASE}/gpm_track.py obs_epoch --obs_id ${obsnum})"
datadir="${GPMSCRATCH}/${epoch}/${obsnum}"

cd "${datadir}" || exit 1

# Makes fits_warp parallelisation work on Zeus
# export KMP_INIT_AT_FORK=false

# Sub-channels
#subchans="0000 0001 0002 0003 MFS"
subchans="MFS"  # For now, only do post-processing on the MFS image -- the others are not needed for our current purpose!

# flux_warp method
method=scaled

# Sky model
POS_MODEL_CATALOGUE="${GPMBASE}/models/Catalog_sparse_unresolved.fits"
FLUX_MODEL_CATALOGUE="${GPMBASE}/models/GGSM_sparse_unresolved.fits"
# Set max separation for flux_warp crossmatch as ~ 1' -- unlikely that the ionosphere would be that brutal
separation=$(echo "60/3600" | bc -l)

# Set exclusion for flux_warp internal exclusive crossmatch as ~ 3'
exclusion=$(echo "180/3600" | bc -l)

metafits="${obsnum}.metafits"
if [[ ! -e ${metafits} ]] || [[ ! -s ${metafits} ]]
then
    wget -O "${metafits}" http://ws.mwatelescope.org/metadata/fits?obs_id=${obsnum}
    test_fail $?
fi

chan=$( pyhead.py -p CENTCHAN "$metafits" | awk '{print $3}' )
ra=$(pyhead.py -p RA "$metafits" | awk '{print $3}')
dec=$(pyhead.py -p DEC "$metafits" | awk '{print $3}')
b=$(python -c "import astropy.units as u; from astropy.coordinates import SkyCoord; print(abs(SkyCoord($ra*u.deg, $dec*u.deg).galactic.b.deg))")
minsrcs=500
if [[ "${chan}" -eq 69 ]] && (( $(echo  "$b < 10" | bc -l) ))
then
    minsrcs=50
fi

metafits=$(ls -t ${obsnum}*metafits* | head -1)

# TODO: Rethink the wisdom of doing some of the following "compute-saving" checks of certain files pre-existing
for subchan in ${subchans}
do
    # Make sure the I and V images have sensible PSFs
    for pol in I V
    do
        BMAJ=$(pyhead.py -p BMAJ "${obsnum}_deep-${subchan}-${pol}-image-pb.fits" | awk '{print $3}' )
        if [[ "$BMAJ" == "0"  ]]
        then
            echo "${obsnum}_deep-${subchan}-${pol}-image-pb.fits has zero-size PSF: something is broken!"
            test_fail 1
        fi
    done

    # The mask_image.py operation will destructively remove the pixels. I can not think of a case 
    # where we actually want to keep pixels below 5% of the PB, apart from _maybe_ causing non-uniform
    # noise issues in the swarp image. In any case, the below attempts to preserve the original image
    # as a just in case. 
    for pol in I V
    do
        if [[ ! -e "${obsnum}_deep-${subchan}-${pol}-image-pb_original.fits" ]]
        then 
            cp -v "${obsnum}_deep-${subchan}-${pol}-image-pb.fits" "${obsnum}_deep-${subchan}-${pol}-image-pb_original.fits"
        fi
        if [[ ! -e "${obsnum}_deep-${subchan}-${pol}-image-pb.fits" ]]
        then 
            if [[ ! -e "${obsnum}_deep-${subchan}-${pol}-image-pb_original.fits" ]]
            then 
                echo "Missing ${obsnum}_deep-${subchan}-${pol}-image-pb.fits file, and no copy found. This should not happen. "
                test_fail 2
            fi
            cp -v "${obsnum}_deep-${subchan}-${pol}-image-pb_original.fits" "${obsnum}_deep-${subchan}-${pol}-image-pb.fits"
        fi
    done
    

    # Generate a weight map for mosaicking (only makes sense for Stokes I)
    chans=($( pyhead.py -p CHANNELS "${obsnum}.metafits" | awk '{print $3}' | sed "s/,/ /g" ))
    if [[ ${subchan} == "MFS" ]]
    then
        i=0
        j=23
    else
        n=${subchan:3}
        i=$((n * 6))
        j=$((i + 5))
    fi
    cstart=${chans[$i]}
    cend=${chans[$j]}
    # DIRTY HACK for ch 156 data
#        ((cstart+=1))
#        ((cend+=1))
    lookup_beam.py "${obsnum}" \
    "_deep-${subchan}-I-image-pb.fits" \
    "${obsnum}_deep-${subchan}-I-image-pb-" \
    -c "$cstart-$cend"

    for pol in I V
    do
        mask_image.py "${obsnum}_deep-${subchan}-${pol}-image-pb.fits" \
        "${obsnum}_deep-${subchan}-I-image-pb-XX-beam.fits" \
        "${obsnum}_deep-${subchan}-I-image-pb-YY-beam.fits" \
        --apply-mask -v

        # move into place the new masked image
        rm "${obsnum}_deep-${subchan}-${pol}-image-pb.fits" && \
        mv "${obsnum}_deep-${subchan}-${pol}-image-pb_mask.fits" \
           "${obsnum}_deep-${subchan}-${pol}-image-pb.fits"
    done

    BANE --cores 1 --compress "${obsnum}_deep-${subchan}-I-image-pb.fits"
    test_fail $?

    aegean --cores 1 --autoload --table="./${obsnum}_deep-${subchan}-I-image-pb.fits" \
        "./${obsnum}_deep-${subchan}-I-image-pb.fits"  > "${obsnum}_deep-${subchan}_aegean.log" 2>&1
    test_fail $?

    nsrc=$(grep "INFO found" "${obsnum}_deep-${subchan}_aegean.log" | head -1 | awk '{print $3}')

    if [[ $nsrc -lt $minsrcs ]]
    then
        echo "Can't warp ${obsnum} -- only $nsrc sources and minimum required id $minsrcs -- probably a horrible image"
        test_fail 1
    else
        RA=$( pyhead.py -p RA "${obsnum}.metafits" | awk '{print $3}' )
        Dec=$( pyhead.py -p DEC "${obsnum}.metafits" | awk '{print $3}' )
        chan=$( pyhead.py -p CENTCHAN "${obsnum}.metafits" | awk '{print $3}' )
        mid=$( pyhead.py -p CRVAL3 "${obsnum}_deep-${subchan}-I-image-pb.fits" | awk '{print $3}' )
        freqq=$(echo "$mid" | awk '{printf "%03.0f",($1)/1e6}')
        
        # Roughly the centre and radius of the image:
        coords="$RA $Dec"
        # TODO make this dependent on CENTCHAN
        radius=50. #24.8
        
        fits_warp.py \
            --incat "${obsnum}_deep-${subchan}-I-image-pb_comp.fits" \
            --refcat "${POS_MODEL_CATALOGUE}" \
            --xm "${obsnum}_${subchan}_complete_sources_xm.fits" \
            --plot \
            --ra1 ra \
            --dec1 dec \
            --ra2 RAJ2000 \
            --dec2 DEJ2000 \
            --infits "${obsnum}_deep-${subchan}-I-image-pb.fits"
        test_fail $?
        
        fits_warp.py --incat "./${obsnum}_deep-${subchan}-I-image-pb_comp.fits" \
            --refcat "${POS_MODEL_CATALOGUE}" \
            --corrected "./${obsnum}_deep-${subchan}-I-image-pb_comp_warp-corrected.fits" \
            --xm "./${obsnum}_${subchan}_fits_warp_xm.fits" \
            --suffix warp \
            --infits "./${obsnum}_deep-${subchan}-[IV]-image-pb.fits" \
            --ra1 ra --dec1 dec \
            --ra2 RAJ2000 --dec2 DEJ2000 \
            --plot \
            --nsrcs 750 \
            --vm 10 \
            --progress \
            --cores ${GPMNPCPUS} \
            --signal peak_flux_1 \
            --enforce-min-srcs 100
            # --signal peak_flux --noise local_rms --SNR 10
        test_fail $?

        
        # flux_warp dependency here
        # Match the image catalogue to the model table:
        match_catalogues \
            "${obsnum}_deep-${subchan}-I-image-pb_comp_warp-corrected.fits" \
            "${FLUX_MODEL_CATALOGUE}" \
            --separation "${separation}" \
            --exclusion_zone "${exclusion}" \
            --outname "./${obsnum}_${subchan}_xm.fits" \
            --threshold 0.1 \
            --nmax 1000 \
            --coords ${coords} \
            --radius "${radius}" \
            --ra2 "RAJ2000" \
            --dec2 "DEJ2000" \
            --ra1 "ra" \
            --dec1 "dec" \
            -F "int_flux" \
            --eflux "err_int_flux" \
            --localrms "local_rms"
        test_fail $?

            # GLEAM-X options
            #--mode mean \
            #--update-bscale \
#        if [[ ! -e "${obsnum}_deep-${subchan}-I-image-pb_warp_${method}_cf_output.txt" ]]

        for pol in I V
        do
            if [[ ! -e "${obsnum}_deep-${subchan}-${pol}-image-pb_warp_unscaled.fits" ]]
            then
                flux_warp \
                    "${obsnum}_${subchan}_xm.fits" \
                    "${obsnum}_deep-${subchan}-${pol}-image-pb_warp.fits" \
                    --freq "${freqq}" \
                    --threshold 0.1 \
                    --mode=linear_screen \
                    --nmax 400 \
                    --flux_key "flux" \
                    --smooth 5.0 \
                    --ignore_magellanic \
                    --localrms_key "local_rms" \
                    --add-to-header \
                    --ra_key "RAJ2000" \
                    --dec_key "DEJ2000" \
                    --index "alpha" \
                    --curvature "beta" \
                    --ref_flux_key "S_200" \
                    --ref_freq 200.0 \
                    --alpha -0.77 \
                    --plot \
                    --cmap "gnuplot2" \
                    --order 2 \
                    --ext png \
                    --nolatex
                test_fail $?

                # The _scaled stem will break onward processing so move the filenames around
                mv ${obsnum}_deep-${subchan}-${pol}-image-pb_warp.fits \
                   ${obsnum}_deep-${subchan}-${pol}-image-pb_warp_unscaled.fits

                mv ${obsnum}_deep-${subchan}-${pol}-image-pb_warp_scaled.fits \
                   ${obsnum}_deep-${subchan}-${pol}-image-pb_warp.fits
            fi
        done

        # Rerun the source finding on both I and V (but will need to do fresh BANE on V)
        BANE --cores 1 --compress "${obsnum}_deep-${subchan}-V-image-pb_warp.fits"
        test_fail $?

        # Compress the scaling image so it can be applied it to the RMS and BKG images
        factor=$(pyhead.py -p BN_CFAC "${obsnum}_deep-${subchan}-I-image-pb_rms.fits" | awk '{print $3}')
        SR6 -f $factor \
            -o ${obsnum}_deep-${subchan}-I-image-pb_warp_scaled_cf_sr6.fits \
            ${obsnum}_deep-${subchan}-I-image-pb_warp_scaled_cf.fits
        python3 $GPMBASE/gpm/bin/divide.py \
            ${obsnum}_deep-${subchan}-I-image-pb_rms.fits \
            ${obsnum}_deep-${subchan}-I-image-pb_warp_scaled_cf_sr6.fits \
            ${obsnum}_deep-${subchan}-I-image-pb_warp_rms.fits
        python3 $GPMBASE/gpm/bin/divide.py \
            ${obsnum}_deep-${subchan}-I-image-pb_bkg.fits \
            ${obsnum}_deep-${subchan}-I-image-pb_warp_scaled_cf_sr6.fits \
            ${obsnum}_deep-${subchan}-I-image-pb_warp_bkg.fits

        for pol in I V
        do
            # (Don't save to the log this time as the numbers should not have changed)
            aegean --cores 1 --autoload --table="./${obsnum}_deep-${subchan}-${pol}-image-pb_warp.fits" "./${obsnum}_deep-${subchan}-${pol}-image-pb_warp.fits"
            test_fail $?

            # Generate a weight map for mosaicking
            generate_weight_map.py \
                "${obsnum}_deep-${subchan}-I-image-pb-XX-beam.fits" \
                "${obsnum}_deep-${subchan}-I-image-pb-YY-beam.fits" \
                "${obsnum}_deep-${subchan}-${pol}-image-pb_warp_rms.fits"
            test_fail $?
        done
    fi
done

track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"

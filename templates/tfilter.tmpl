#! /bin/bash -l
# Run filtering on the transient HDF5 files
# Upload the results to the ADACS Nimbus instance
set -x

pipeuser=PIPEUSER
obsnum=OBSNUM
datadir=DATADIR

epoch=$(determine_epoch.py --obsid $obsnum)
epoch="Epoch"$epoch
cd $datadir/$epoch/$obsnum/

# TODO: The filtering code is in this github and needs to be installed somewhere:
# https://github.com/CsanadHorvath/TransientSearch/

# Total placeholder -- we need to decide what filter(s) we want to run
DoFilter.py ${obsnum}_transient.hdf5 ${obsnum}_8_20_filter.fits time_corr_gauss "(8, 1, 1), (20, 1, 1)"

# Almost certainly want to take the max of those results -- but ideally within the script not separately
# (so we don't have to save a very large and unwieldy intermediate cube)
# TODO: figure out how to run the time_max command on the data in memory
DoFilter.py ${obsnum}_8_20_filter.fits ${obsnum}_8_20_max.fits time_max 0

# We may well want to adjust that cut-off
DoIslanding.py --in ${obsnum}_8_20_max.fits --out ${obsnum}_8_20_max_tab.fits --std --cutoff 3

# Note that this really is a call to the GLEAM-X environment variable, since that's where the sky model is
GetKnownSources.py ${obsnum}_8_20_max.fits ${obsnum}_8_20_max_knownsrcs.fits ${GXBASE}/models/GGSM.fits

# This puts the cross-match information in the original table
DoCrossMatching.py --in-fname ${obsnum}_8_20_max_tab.fits --match-fname ${obsnum}_8_20_max_knownsrcs.fits

# This gets the values at locations of known sources
GetValsAtCoords.py --vals-from ${obsnum}_8_20_max.fits --in_fname ${obsnum}_8_20_max_knownsrcs.fits --out_fname ${obsnum}_8_20_max_knownsrc_vals.fits

# TODO: Get all the other invocations that Csanad was planning in order to populate his tables as he expected

# Make plots
DiagnosticPlots.py --candidates ${obsnum}_8_20_max_tab.fits --observation ${obsnum}_transient.hdf5 --filter ${obsnum}_8_20_max.fits --known ${obsnum}_8_20_max_knownsrcs.fits

# Upload to Nimbus instance
# TODO: Nick/Paul to provide destination
# TODO: Tim to incorporate into our environment variables

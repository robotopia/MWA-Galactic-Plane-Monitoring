#! /bin/bash -l

# Run filtering on the transient HDF5 files
# Upload the results to the ADACS Nimbus instance
set -x

pipeuser=PIPEUSER
obsnum=OBSNUM
datadir=DATADIR

# NOTE: The current GPM Profile script will set up the PYTHONPATH
# to search the GPMBASE folder and the Csanda's transient filter
# code which is installed in the externals folder. For this reason
# so long as the script names are unique they should be found and
# executed without issue. 

epoch=$(determine_epoch.py --obsid $obsnum)
epoch="Epoch${epoch}"

cd "$datadir/$epoch/$obsnum/" || exit 1

filtercmds=$('time_corr_gauss "(5, 1, 1), (20, 1, 1)" time_max 0' 'time_multi_corr_gauss 0 time_max 0' 'stdev 0')
filternames=$('tcg_5_20' 'tmcg' 'std') #, 'spike')
nfilters=${#filternames[@]}

###### Data required for all filters ######
# This is to get the light curve peak values later
DoFilter.py ${obsnum}_transient.hdf5 ${obsnum}_max.fits time_max 0

# This is to get the known source residuals later
DoFilter.py ${obsnum}_transient.hdf5 ${obsnum}_stdev.fits stdev 0

# This is to get help filter aliases later
DoFilter.py ${obsnum}_transient.hdf5 ${obsnum}_mean.fits mean 0

# This gives us a way to test what the ionospheric distortions typically look like, later
GetKnownSources.py ${obsnum}_mean.fits ${obsnum}_tmp.fits "${GXBASE}/models/GGSM.fits"

# This gets the value of the primary beam at the locations of known sources
GetValsAtCoords.py --vals-from beam --vals-name beam --in_fname ${obsnum}_tmp.fits --out_fname ${obsnum}_known.fits

# This gets the "residuals" (i.e. stdevs) at locations of known sources (nks_ prepended during xmatch)
GetValsAtCoords.py --vals-from ${obsnum}_stdev.fits --vals-name res --in_fname ${obsnum}_tmp.fits --out_fname ${obsnum}_tmp.fits
    
    
###### Filter loop ######

for (( i=0; i<$nfilters; i++ ))
do
    filtcmd=${filtercmds[$i]}
    filtname=${filternames[$i]}

    DoFilter.py ${obsnum}_transient.hdf5 ${obsnum}_${filtname}.fits ${filtcmd}
    
###### Candidate detection #######
    
    # TODO: test various cut-offs
    DoIslanding.py --in ${obsnum}_${filtname}.fits --out ${obsnum}_tmp.fits --std --cutoff 10 --peak-name can_det_stat --filter-name ${filtname}
    
    # This gets the value of the primary beam at the locations of the detected candidates
    GetValsAtCoords.py --vals-from beam --vals-name can_beam --in_fname ${obsnum}_tmp.fits --out_fname ${obsnum}_tmp.fits
    
    # This gets the peaks of the light curves at the locations of the detected candidates
    GetValsAtCoords.py --vals-from ${obsnum}_max.fits --vals-name can_peak_flux --in_fname ${obsnum}_tmp.fits --out_fname ${obsnum}_tmp.fits
    
    # This gets the standard deviation through the cube at the locations of the detected candidates
    GetValsAtCoords.py --vals-from ${obsnum}_stdev.fits --vals-name can_std --in_fname ${obsnum}_tmp.fits --out_fname ${obsnum}_${filtname}_cands.fits
    
    ###### Nearest Known Source characterisation ######
    
    # This gets the detection statistics at the locations of known sources (nks_ prepended during xmatch)
    GetValsAtCoords.py --vals-from ${obsnum}_${filtname}.fits --vals-name det_stat --in_fname ${obsnum}_known.fits --out_fname ${obsnum}_${filtname}_knownsrcs.fits
    
    ###### Cross-matching #######
    ### This puts the cross-match information in the original table
    DoCrossMatching.py --in-fname ${obsnum}_${filtname}_cands.fits --match-fname ${obsnum}_${filtname}_knownsrcs.fits
    #
    AddStats.py --cands ${obsnum}_${filtname}_cands.fits --known ${obsnum}_${filtname}_knownsrcs.fits --out_fname ${obsnum}_${filtname}_cands_wstats.fits

    ##### Cutting sources based on statistics ####
    SelectSources.py --cands ${obsnum}_${filtname}_cands_wstats.fits --out_fname ${obsnum}_${filtname}_cands_wstats_selected.fits

    ##### Plotting #####
    #
    ## Make plots
    DiagnosticPlots.py --candidates ${obsnum}_${filtname}_cands_wstats_selected.fits --observation ${obsnum}_transient.hdf5 --filter ${obsnum}_${filtname}.fits --filter-name ${filtname} --known ${obsnum}_${filtname}_knownsrcs.fits

done
    #
    ## Upload to Nimbus instance
    ## TODO: Nick/Paul to provide destination
    ## TODO: Tim to incorporate into our environment variables

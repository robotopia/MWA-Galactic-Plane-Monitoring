#! /bin/bash -l

set -x

pipeuser=PIPEUSER
obsnum=OBSNUM

# If obsnum is a file, then we are in an array job
if [[ -f "${obsnum}" ]]
then
    taskid="${SLURM_ARRAY_TASK_ID}"
    jobid="${SLURM_ARRAY_JOB_ID}"

    echo "obsfile ${obsnum}"
    obsnum=$(sed -n -e "${SLURM_ARRAY_TASK_ID}"p "${obsnum}")
    echo "image obsid ${obsnum}"
else
    taskid=1
    jobid="${SLURM_JOB_ID}"
fi

echo "jobid: ${jobid}"
echo "taskid: ${taskid}"

function test_fail {
if [[ $1 != 0 ]]
then
    track_task.py fail --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
    exit "$1"
fi
}

# Set version number
base=BASEDIR
debug=DEBUG
# Which data column to image
if [[ ! -z $debug ]]
then
    datacolumn="CORRECTED_DATA"
else
    datacolumn="DATA"
fi

# WSClean suffixes for subchannels and MFS
subchans="MFS 0000 0001 0002 0003"
# Minimum uvw for self-calibration (in lambda)
minuv=75
# S/N Level at which to choose masked pixels for deepclean
msigma=3
# S/N Threshold at which to stop cleaning
tsigma=1

# Update database
cd "${base}" || exit
track_task.py start --jobid="${jobid}" --taskid="${taskid}" --start_time="$(date +%s)"

datadir="${base}/${obsnum}"
cd "${datadir}" || exit

# TODO: replace with find
metafits="$(ls -t ${obsnum}*metafits* | head -1)"

# Set up telescope-configuration-dependent options
# For the GPM dataset, the telescope configration is always MWALB
#if [[ $obsnum -lt 1151402936 ]] ; then
#    telescope="MWA128T"
#    basescale=1.1
#    imsize=4000
#    robust=-1.0
#elif [[ $obsnum -ge 1151402936 ]] && [[ $obsnum -lt 1191580576 ]] ; then
#    telescope="MWAHEX"
#    basescale=2.0
#    imsize=2000
#    robust=-2.0
#elif [[ $obsnum -ge 1191580576 ]] ; then
    telescope="MWALB"
    basescale=0.6
    imsize=8000
    robust=0.5
#fi

# Set up channel-dependent options
chan="$(pyhead.py -p CENTCHAN ${metafits} | awk '{print $3}')"
bandwidth="$(pyhead.py -p BANDWDTH ${metafits} | awk '{print $3}')"
centfreq="$(pyhead.py -p FREQCENT ${metafits} | awk '{print $3}')"
chans="$(pyhead.py -p CHANNELS ${metafits} | awk '{print $3}' | sed 's/,/ /g')"
chans=($chans)

# Pixel scale
 # At least 4 pix per synth beam for each channel
scale=$(echo "$basescale / $chan" | bc -l)

# Naming convention for output files
lowfreq=$(echo "${centfreq}" "${bandwidth}" | awk '{printf("%00d\n",$1-($2/2.)+0.5)}')
highfreq=$(echo "$centfreq $bandwidth" | awk '{printf("%00d\n",$1+($2/2.)+0.5)}')
freqrange="${lowfreq}-${highfreq}"

# Calculate min uvw in metres
minuvm=$(echo "234 * $minuv / $chan" | bc -l)

# Found that multiscale cleaning recovers flux density in the extragalactic sky better than not, and doesn't add much to processing time
multiscale="-multiscale -mgain 0.85 -multiscale-gain 0.15 -multiscale-scale-bias 0.7"

# Check whether the phase centre has already changed
# image will fail if it has, so measurement set must be shifted back to its original position
current=$(chgcentre "${obsnum}.ms") 
coords=$($GPMBASE/gpm/bin/calc_optimum_pointing.py --metafits "${metafits}")

# Remove any lingering beam files. If obs_image was run previously, and if, e.g.,
# it timed out while the beam files were being generated, subsequent runs will
# fail because this run won't try to recreate the beam files, which will be corrupted.
# Ensure this doesn't happen by force-removing existing beam files
rm -f *beam*fits

if [[ $current == *"shift"* ]] 
then
    echo "Detected that this measurement set has undergone a denormal shift; this must be undone before subtrmodel."
    echo "Optimally shifting co-ordinates of measurement set to $coords, without zenith shiftback."
    chgcentre \
            "${obsnum}.ms" \
            ${coords}
else 
    echo "Detected that no shift is needed for this measurement set."
fi

# Create a template image that has all the same properties as our eventual WSClean image
if [[ ! -e "${obsnum}_template.fits" ]]
then
    wsclean \
            -gridder wgridder \
            -shift ${coords} \
            -abs-mem ${GPMMEMORY} \
            -mgain 1.0 \
            -nmiter 1 \
            -niter 0 \
            -name ${obsnum}_template \
            -size ${imsize} ${imsize} \
            -scale ${scale:0:8} \
            -pol XX \
            -data-column ${datacolumn} \
            -channel-range 4 5 \
            -interval 4 5 \
            -nwlayers ${GPMNCPUS} \
            "${obsnum}.ms"

    rm "${obsnum}_template-dirty.fits"
    mv "${obsnum}_template-image.fits" "${obsnum}_template.fits"
fi

## Hardcoding John's PB script location for now
## Also hardcoding creating four sub-band beams
#pols="XX XXi XY XYi YX YXi YY YYi"
#
#for n in {0..3}
#do
#    i=$((n * 6))
#    cstart=${chans[$i]}
#    j=$((i + 5))
#    cend=${chans[$j]}
#    for pol in $pols
#    do 
#        if [[ ! -e "${obsnum}_000${n}-${pol}-beam.fits" ]]
#        then
#            lookup_jones.py ${obsnum} _template.fits ${obsnum}_000${n}- -c $cstart-$cend --wsclean_names
#            if [[ $? != 0 ]]
#            then
#                echo "The script lookup_jones.py failed. Stopping now."
#                exit 1
#            fi
#        fi
#        ln -s "${obsnum}_000${n}-${pol}-beam.fits" "${obsnum}_deep-000${n}-beam-${pol}.fits"
#    done
#done

# Set the pipefail so the test_fail does not test for tee
set -o pipefail
# Deep clean (for pipeline)
wsclean \
        -gridder wgridder \
        -shift ${coords} \
        -abs-mem ${GPMMEMORY} \
        $multiscale \
        -nmiter 5 \
        -niter 10000000 \
        -reuse-primary-beam \
        -apply-primary-beam \
        -auto-mask ${msigma} \
        -auto-threshold ${tsigma} \
        -name ${obsnum}_deep \
        -size ${imsize} ${imsize} \
        -scale ${scale:0:8} \
        -weight briggs ${robust} \
        -pol I,Q,U,V \
        -join-channels \
        -channels-out 4 \
        -fit-spectral-pol 2 \
        -data-column ${datacolumn} \
        "${obsnum}.ms" | tee wsclean.log
# Outputs have the generic format:
#    {name}-deep-{chan:04d}-{pol}-image.fits

test_fail $?
track_task.py finish --jobid="${jobid}" --taskid="${taskid}" --finish_time="$(date +%s)"
track_task.py obs_status --obs_id="${obsnum}" --status='imaged'

### TODO fix wsclean2gleam.py so it more cleverly handles lack of polarisation
# Rename files
#for subchan in $subchans
#do
#    deep="${obsnum}_deep-$subchan-image.fits"
#    newfilename=`wsclean2gleam.py -f $deep -v $version`
#    mv $deep $newfilename
#done

# Shallow clean for a test
# wsclean $multiscale \
#     -nmiter 1 \
#     -niter 100 \
#     -reuse-primary-beam \
#     -apply-primary-beam \
#     -auto-mask $msigma \
#     -auto-threshold $tsigma \
#     -name ${obsnum}_deep \
#     -size ${imsize} ${imsize} \
#     -scale ${scale:0:8} \
#     -weight briggs ${robust} \
#     -pol I \
#     -join-channels \
#     -channels-out 4 \
#     -data-column ${datacolumn} \
#     ${obsnum}.ms | tee wsclean.log

#    -save-source-list \
#    -fit-spectral-pol 1 \
#    ${obsnum}.ms | tee wsclean.log"

## Shallow clean (for workshop)
#wsclean -nmiter 1 -niter 100000 \
#    -scale ${scale:0:8} \
#    -mgain 0.85 \
#    -auto-threshold 8 \
#    -name ${obsnum} \
#    -size ${imsize} ${imsize} \
#    -pol I \
#    -weight briggs ${robust} \
#    -data-column CORRECTED_DATA \
#    ${obsnum}.ms
